CronManager.grid.CronJobLog = function(config) {    config = config || {};    this.sm = new Ext.grid.CheckboxSelectionModel();    Ext.applyIf(config,{        id: 'cronmanager-grid-cronjoblog',		url: CronManager.config.connectorUrl,		baseParams: { action: 'mgr/cronjobs/getlog', cronid: MODx.request.id },		fields: ['id','logdate','message','day'],		paging: true,		remoteSort: true,		anchor: '97%',		autoExpandColumn: 'snippet',        grouping: true,        groupBy: 'day',        sortBy: 'logdate',        sortDir: 'DESC',        singleText: _('cronmanager.log_message'),        pluralText: _('cronmanager.log_messages'),        sm: this.sm,		emptyText: _('cronmanager.log.norecords'),		columns: [this.sm, {            header: _('id'),			dataIndex: 'id',			sortable: true,			width: 25,            hidden: true        },{            header: _('cronmanager.log.date'),			dataIndex: 'logdate',			width: 75,			sortable: true,            renderer : Ext.util.Format.dateRenderer(MODx.config.manager_date_format +' '+ MODx.config.manager_time_format)        },{            header: _('cronmanager.log.message'),			dataIndex: 'message',			sortable: true        },{            header: _('cronmanager.log_day')            ,dataIndex: 'day'            ,hidden: true        }],		tbar:[{			xtype: 'textfield',			id: 'cronmanager-search-filter',			emptyText: _('cronmanager.search...'),			listeners: {				'change': { fn:this.search, scope:this },				'render': { fn: function(cmp) {					new Ext.KeyMap(cmp.getEl(), {						key: Ext.EventObject.ENTER,						fn: function() {							this.fireEvent('change',this);							this.blur();							return true;						}, scope: cmp					});				}, scope: this }			}		}]    });    if (config.grouping) {        Ext.applyIf(config,{          view: new Ext.grid.GroupingView({            forceFit: true            ,hideGroupedColumn: true            ,enableGroupingMenu: false            ,enableNoGroups: false            ,scrollOffset: 0            ,groupTextTpl: '{text} ({[values.rs.length]} {[values.rs.length > 1 ? "'                +(config.pluralText || _('records')) + '" : "'                +(config.singleText || _('record'))+'"]})'          })        });    }    CronManager.grid.CronJobLog.superclass.constructor.call(this, config)};Ext.extend(CronManager.grid.CronJobLog, MODx.grid.Grid);Ext.extend(CronManager.grid.CronJobLog, MODx.grid.Grid, {	search: function(tf,nv,ov) {        var s = this.getStore();        s.baseParams.query = tf.getValue();        this.getBottomToolbar().changePage(1);        this.refresh();    }    // Grid contextual menu    ,getMenu: function(cfg) {        var m = [];        // Single row selected        m.push({            text: _('cronmanager.log_view_full')            ,handler: this.viewLog        });        // Multiple rows selected        if (this.getSelectionModel().getCount() > 1) {            var rs = this.getSelectionModel().getSelections();            m.push('-');            m.push({                text: _('cronmanager.logs_delete_selected')                ,handler: function() {                    var cs = this.getSelectedAsList();                    if (cs === false) return false;                    MODx.msg.confirm({                        title: _('cronmanager.logs_delete_selected')                        ,text: _('cronmanager.logs_delete_selected_confirm')                        ,url: this.config.url                        ,params: {                            action: 'mgr/cronjobs/deleteMulti'                            ,ids: cs                        }                        ,listeners: {                            'success': {                                fn: function(r) {                                    this.refresh();                                }                                ,scope: this                            }                        }                    });                }            });        }        this.addContextMenuItem(m);    }    // View full log    ,viewLog: function(btn, e) {        if (!this.fullLog) {            this.fullLog = MODx.load({                xtype: 'cronmanager-window-fulllog'                ,record: this.menu.record                ,listeners: {                    success: {                        fn: this.refresh                        ,scope: this                    }                }            });        }        this.fullLog.setValues(this.menu.record);        this.fullLog.show(e.target);    }});Ext.reg('cronmanager-grid-cronjoblog', CronManager.grid.CronJobLog);/** * @class CronManager.window.FullLog * @extends MODx.Window * @param config * @xtype cronmanager-window-fulllog */CronManager.window.FullLog = function(config) {    config = config || {};    Ext.applyIf(config, {        title: config.record.logdate        ,fields: [{            xtype: 'textarea'            ,name: 'message'            ,anchor: '100%'            ,readOnly: true            ,height: '150'        }]        ,buttons: [{            text: _('close')            ,scope: this            ,handler: function() { this.hide(); }        }]        ,keys: []    });    CronManager.window.FullLog.superclass.constructor.call(this, config);};Ext.extend(CronManager.window.FullLog, MODx.Window);Ext.reg('cronmanager-window-fulllog', CronManager.window.FullLog);