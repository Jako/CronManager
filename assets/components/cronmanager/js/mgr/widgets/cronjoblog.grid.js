CronManager.grid.CronJobLog = function(config) {    config = config || {};    Ext.applyIf(config,{        id: 'cronmanager-grid-cronjoblog',		url: CronManager.config.connectorUrl,		baseParams: { action: 'mgr/cronjobs/getlog', cronid: MODx.request.id },		fields: ['id','logdate','message'],		paging: true,		remoteSort: true,		anchor: '97%',		autoExpandColumn: 'snippet',		emptyText: _('cronmanager.log.norecords'),		columns: [{            header: _('id'),			dataIndex: 'id',			sortable: true,			width: 25        },{            header: _('cronmanager.log.date'),			dataIndex: 'logdate',			width: 75,			sortable: true        },{            header: _('cronmanager.log.message'),			dataIndex: 'message',			sortable: true        }],		tbar:[{			xtype: 'textfield',			id: 'cronmanager-search-filter',			emptyText: _('cronmanager.search...'),			listeners: {				'change': { fn:this.search, scope:this },				'render': { fn: function(cmp) {					new Ext.KeyMap(cmp.getEl(), {						key: Ext.EventObject.ENTER,						fn: function() {							this.fireEvent('change',this);							this.blur();							return true;						}, scope: cmp					});				}, scope: this }			}		}]    });    CronManager.grid.CronJobLog.superclass.constructor.call(this, config)};Ext.extend(CronManager.grid.CronJobLog, MODx.grid.Grid);Ext.extend(CronManager.grid.CronJobLog, MODx.grid.Grid, {	search: function(tf,nv,ov) {        var s = this.getStore();        s.baseParams.query = tf.getValue();        this.getBottomToolbar().changePage(1);        this.refresh();    }});Ext.reg('cronmanager-grid-cronjoblog', CronManager.grid.CronJobLog);