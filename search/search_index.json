{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"CronManager Create and run cronjobs within the manager Requirements MODX Revolution 2.6+ PHP v5.6+ Features The CronManager for MODx makes it possible to execute snippets by the crontab of the server. By using the manager of MODx Revolution you can simply add new snippets to the cron list. Using snippets for your cron management also requires properties and you can add properties manually by setting up key value pairs but also with a propertyset (name).","title":"Description"},{"location":"#cronmanager","text":"Create and run cronjobs within the manager","title":"CronManager"},{"location":"#requirements","text":"MODX Revolution 2.6+ PHP v5.6+","title":"Requirements"},{"location":"#features","text":"The CronManager for MODx makes it possible to execute snippets by the crontab of the server. By using the manager of MODx Revolution you can simply add new snippets to the cron list. Using snippets for your cron management also requires properties and you can add properties manually by setting up key value pairs but also with a propertyset (name).","title":"Features"},{"location":"contributors/","text":"The CronManager project was started in 2011 by Bert Ooost and is maintained and developed further since 2019 by Thomas Jakobi . Many thanks to all who contributed, whether by creating pull requests, submitting bug reports, or donating.","title":"Contributors"},{"location":"installation/","text":"Install from MODX Extras Search for CronManager in the Package Manager of your MODX installation and install it in there. Manual installation If you can't access the MODX Extras Repository in your MODX installation, you can manually install CronManager. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. CronManager should now show up in the list of available packages. Click the corresponding 'Install' button and follow instructions to complete the installation. Build it from source To build and install the package from source you could use Git Package Management . The GitHub repository of CronManager contains a config.json to build that package locally. Use this option, if you want to debug CronManager and/or contribute bugfixes and enhancements.","title":"Installation"},{"location":"installation/#install-from-modx-extras","text":"Search for CronManager in the Package Manager of your MODX installation and install it in there.","title":"Install from MODX Extras"},{"location":"installation/#manual-installation","text":"If you can't access the MODX Extras Repository in your MODX installation, you can manually install CronManager. Download the transport package from MODX Extras (or one of the pre built transport packages in _packages ) Upload the zip file to your MODX installation's core/packages folder or upload it manually in the MODX Package Manager. In the MODX Manager, navigate to the Package Manager page, and select 'Search locally for packages' from the dropdown button. CronManager should now show up in the list of available packages. Click the corresponding 'Install' button and follow instructions to complete the installation.","title":"Manual installation"},{"location":"installation/#build-it-from-source","text":"To build and install the package from source you could use Git Package Management . The GitHub repository of CronManager contains a config.json to build that package locally. Use this option, if you want to debug CronManager and/or contribute bugfixes and enhancements.","title":"Build it from source"},{"location":"usage/","text":"Setup the cron script After the installation, you need to configure the cron script in your servers crontab list. On most hostings you have a control panel like Direct Admin available and mostly you're able to configure cronjobs via that control panel. If you have access to there server with SSH could add the cronjob with the \"crontab -e\" command. Add the following line as cronjob: php /path/to/your/modx/installation/assets/components/cronmanager/cron.php Note In some cases this command needs some modifications (i.e. the path to a version specific php file). Please discuss this with your hosting provider. The cron connector could also be called as an external webcronjob using the following url: https://your.domain/assets/components/cronmanager/cron.php?cronjob_id=xxx The value xxx has to be filled with the random string in the MODX system setting cronmanager.cronjob_id We advise you to execute it on every minute, every day in every month (* to all: m h dom mon dow). But if you're sure, that there are no needs for an every minute cronjob, you could change the crontab interval to your own needs. Custom Manager Page To use the component, navigate to your manager and click on \"Extras > CronManager\". You could create a new cronjob with a click on the create new cronjob button on the top left above the cronjob grid. The grid could be filtered by the snippet name with a search input on the top right above the cronjob grid. Each cronjob could be edited by a click on the edit icon in the row of the cronjob. The log of the cronjob could be seen with a click on the list icon in the row of the cronjob. It could be deleted after a confirmation with a click on the trash icon in the row of the cronjob. The row of each cronjob shows the executed snippet, the minute interval, the last and the next run and the active state of an entry. The minutes and the active state could be edited inline with a double click. The last and the next run column will contain a date when the cron script is executed. Create/Edit The create/edit window for one cronjob has a lot of options, that could be set. You could set the executed snippet, the minute interval, the active state and the snippet properties. The snippet is executed on the site_start resource and it should return a json array: {\"error\": boolean, \"message\": \"string\"} . If not, the output will be saved in the log message and the log entry will be set to successful. The minute interval sets the interval the snippet is executed. Example: If you enter 15, the snippet would run every 15 minutes (when the cron.php file is called every minute). The snippet properties could contain key-value pairs (each on a new line in the format key: value ), a JSON object or the name of a propertyset. The snippet cannot be terminated with exit() , because the CronManager is also terminated with exit. So it cannot write any success or error message to the database. Since version 1.2.2 CronManager: 1 is added as default snippet property to detect if the snippet is executed by CronManager. Caution After adding a cronjob, it isn't active. You have to change the active state to yes in the Active column of the overview or check the checkbox in the edit window.","title":"Usage"},{"location":"usage/#setup-the-cron-script","text":"After the installation, you need to configure the cron script in your servers crontab list. On most hostings you have a control panel like Direct Admin available and mostly you're able to configure cronjobs via that control panel. If you have access to there server with SSH could add the cronjob with the \"crontab -e\" command. Add the following line as cronjob: php /path/to/your/modx/installation/assets/components/cronmanager/cron.php Note In some cases this command needs some modifications (i.e. the path to a version specific php file). Please discuss this with your hosting provider. The cron connector could also be called as an external webcronjob using the following url: https://your.domain/assets/components/cronmanager/cron.php?cronjob_id=xxx The value xxx has to be filled with the random string in the MODX system setting cronmanager.cronjob_id We advise you to execute it on every minute, every day in every month (* to all: m h dom mon dow). But if you're sure, that there are no needs for an every minute cronjob, you could change the crontab interval to your own needs.","title":"Setup the cron script"},{"location":"usage/#custom-manager-page","text":"To use the component, navigate to your manager and click on \"Extras > CronManager\". You could create a new cronjob with a click on the create new cronjob button on the top left above the cronjob grid. The grid could be filtered by the snippet name with a search input on the top right above the cronjob grid. Each cronjob could be edited by a click on the edit icon in the row of the cronjob. The log of the cronjob could be seen with a click on the list icon in the row of the cronjob. It could be deleted after a confirmation with a click on the trash icon in the row of the cronjob. The row of each cronjob shows the executed snippet, the minute interval, the last and the next run and the active state of an entry. The minutes and the active state could be edited inline with a double click. The last and the next run column will contain a date when the cron script is executed.","title":"Custom Manager Page"},{"location":"usage/#createedit","text":"The create/edit window for one cronjob has a lot of options, that could be set. You could set the executed snippet, the minute interval, the active state and the snippet properties. The snippet is executed on the site_start resource and it should return a json array: {\"error\": boolean, \"message\": \"string\"} . If not, the output will be saved in the log message and the log entry will be set to successful. The minute interval sets the interval the snippet is executed. Example: If you enter 15, the snippet would run every 15 minutes (when the cron.php file is called every minute). The snippet properties could contain key-value pairs (each on a new line in the format key: value ), a JSON object or the name of a propertyset. The snippet cannot be terminated with exit() , because the CronManager is also terminated with exit. So it cannot write any success or error message to the database. Since version 1.2.2 CronManager: 1 is added as default snippet property to detect if the snippet is executed by CronManager. Caution After adding a cronjob, it isn't active. You have to change the active state to yes in the Active column of the overview or check the checkbox in the edit window.","title":"Create/Edit"}]}